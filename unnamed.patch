Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
+++ b/.idea/.gitignore	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: .idea/Diamondnew.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Diamondnew.iml b/.idea/Diamondnew.iml
new file mode 100644
--- /dev/null	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
+++ b/.idea/Diamondnew.iml	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="WEB_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
+++ b/.idea/modules.xml	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Diamondnew.iml" filepath="$PROJECT_DIR$/.idea/Diamondnew.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .private/config.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.private/config.php b/.private/config.php
new file mode 100644
--- /dev/null	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
+++ b/.private/config.php	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
@@ -0,0 +1,8 @@
+<?php
+$DBVARS = array(
+    'username' => 'root',
+    'pass' => '',
+    'hostname' => 'localhost',
+    'db_name' => 'cmsdata'
+);
+?>
\ No newline at end of file
Index: index.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/index.php b/index.php
new file mode 100644
--- /dev/null	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
+++ b/index.php	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
@@ -0,0 +1,35 @@
+<?php
+
+include_once 'ww.incs/common.php';
+$page = isset($_REQUEST['page'])? $_REQUEST['page']: '';
+$id = isset($_REQUEST['id'])?(int) $_REQUEST['id']: 0;
+
+if(!$id){
+    if($page){
+        $getinstance =  new Page($id);
+        $r = $getinstance->getInstanceByName($page);
+        if($r && isset($r->id))
+            $id = $r->id;
+        unset($r);
+    }
+    if(!$id){
+        $special = 1;
+        if(!$page){
+            $loves = new Page($id);
+            $r = $loves->getInstanceBySpecial($special);
+            if($r && isset($r->id))
+                $id = $r->id;
+            unset($r);
+        }
+    }
+}
+
+if($id){
+    $PAGEDATA = (isset($r) && $r)? $r: Page::getInstance($id);
+}
+else {
+    echo '404 Error';
+    exit;
+}
+
+echo $PAGEDATA->body;
\ No newline at end of file
Index: ww.admin/index.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ww.admin/index.php b/ww.admin/index.php
new file mode 100644
--- /dev/null	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
+++ b/ww.admin/index.php	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
@@ -0,0 +1,5 @@
+<?php
+
+echo 'i love you';
+
+?>
\ No newline at end of file
Index: ww.incs/basics.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ww.incs/basics.php b/ww.incs/basics.php
new file mode 100644
--- /dev/null	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
+++ b/ww.incs/basics.php	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
@@ -0,0 +1,38 @@
+<?php
+
+session_start();
+
+function autoload($name){
+    require $name .'.php';
+}
+spl_autoload_register('autoload');
+
+function dbInit(){
+    if(isset($GLOBALS['db']))
+        return $GLOBALS['db'];
+    global $DBVARS;
+    $db = new PDO('mysql:host='.$DBVARS['hostname'] .';dbname='.$DBVARS['db_name'], $DBVARS['username'], $DBVARS['pass']);
+    $db->query('SET NAMES utf8');
+    $db->num_queries = 0;
+    $GLOBALS['db'] = $db;
+    return $db;
+}
+
+function dbQuery($query){
+    $db = dbInit();
+    $q = $db->query($query);
+    $db->num_queries++;
+    return $q;
+}
+
+function dbRow($query){
+    $q = dbQuery($query);
+    return $q->fetch(PDO::FETCH_ASSOC);
+}
+
+define('SCRIPTBASE', $_SERVER['DOCUMENT_ROOT'] . '/');
+require SCRIPTBASE.'.private/config.php';
+if(!defined('CONFIG_FILE'))
+    define('CONFIG_FILE',SCRIPTBASE.'.private/config.php');
+
+set_include_path(SCRIPTBASE.'ww.php_classes'.PATH_SEPARATOR.get_include_path());
\ No newline at end of file
Index: ww.incs/common.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ww.incs/common.php b/ww.incs/common.php
new file mode 100644
--- /dev/null	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
+++ b/ww.incs/common.php	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
@@ -0,0 +1,2 @@
+<?php
+require dirname(__FILE__) . '/basics.php';
\ No newline at end of file
Index: ww.php_classes/Page.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ww.php_classes/Page.php b/ww.php_classes/Page.php
new file mode 100644
--- /dev/null	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
+++ b/ww.php_classes/Page.php	(revision 69c1227fdec871098b0ea65d5cd9a22d45e082b0)
@@ -0,0 +1,70 @@
+<?php
+class Page{
+    static $instances = array();
+    static $instancesByName = array();
+    static $instancesBySpecial= array();
+
+    function __construct($v,$byField=0,$fromRow=0,$pvq=0){
+        # byField: 0=ID; 1=Name; 3=special
+        if (!$byField && is_numeric($v)){ // by ID
+            $r=$fromRow?
+                $fromRow:
+                ($v?
+                    dbRow("select * from pages where id=$v limit 1"):
+                    array()
+                );
+        }
+        else if ($byField == 1){ // by name
+            $name=strtolower(str_replace('-','_',$v));
+            $fname='page_by_name_'.md5($name);
+            $r=dbRow("select * from pages where name like '"
+                .addslashes($name)."' limit 1");
+        }
+        else if ($byField == 3 && is_numeric($v)){ // by special
+            $fname='page_by_special_'.$v;
+            $r=dbRow(
+                "select * from pages where special&$v limit 1");
+        }
+        else return false;
+        if(!count($r) || !is_array($r))
+            return false;
+        if(!isset($r['id']))$r['id']=0;
+        if(!isset($r['type']))$r['type']=0;
+        if(!isset($r['special']))$r['special']=0;
+        if(!isset($r['name']))$r['name']='NO NAME SUPPLIED';
+        foreach ($r as $k=>$v) $this->{$k}=$v;
+        $this->urlname=$r['name'];
+        $this->dbVals=$r;
+        self::$instances[$this->id] =& $this;
+        self::$instancesByName[preg_replace(
+            '/[^a-z0-9]/','-',strtolower($this->urlname)
+        )] =& $this;
+        self::$instancesBySpecial[$this->special] =& $this;
+        if(!$this->vars)$this->vars='{}';
+        $this->vars=json_decode($this->vars);
+    }
+
+    static function getInstance($id=0,$fromRow=false,$pvq=false){
+        if (!is_numeric($id)) return false;
+        if (!@array_key_exists($id,self::$instances))
+            self::$instances[$id]=new Page($id,0,$fromRow,$pvq);
+        return self::$instances[$id];
+    }
+
+    function getInstanceByName($name=''){
+        $name=strtolower($name);
+        $nameIndex=preg_replace('#[^a-z0-9/]#','-',$name);
+        if(@array_key_exists($nameIndex,self::$instancesByName))
+            return self::$instancesByName[$nameIndex];
+        self::$instancesByName[$nameIndex]=new Page($name,1);
+        return self::$instancesByName[$nameIndex];
+    }
+
+    function getInstanceBySpecial($sp=0){
+        if (!is_numeric($sp)) return false;
+        if (!@array_key_exists($sp,self::$instancesBySpecial))
+            $instancesBySpecial[$sp]=new Page($sp,3);
+        return $instancesBySpecial[$sp];
+    }
+
+}
\ No newline at end of file
diff --git a/.htaccess b/.htaccess
new file mode 100644
